package com.example.muratfacedetection;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewFrame;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfFloat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.android.CameraBridgeViewBase;
import org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.os.Environment;
import android.os.Looper;
import android.support.v4.view.MotionEventCompat;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.Toast;

public class MainActivity extends Activity implements CvCameraViewListener2 {
	private static final String TAG = "OCVSample::Activity";

	public static final int VIEW_MODE_RGBA = 0;
	public static final int VIEW_MODE_HIST = 1;
	public static final int VIEW_MODE_CANNY = 2;
	public static final int VIEW_MODE_SEPIA = 3;
	public static final int VIEW_MODE_SOBEL = 4;
	public static final int VIEW_MODE_ZOOM = 5;
	public static final int VIEW_MODE_PIXELIZE = 6;
	public static final int VIEW_MODE_POSTERIZE = 7;

	private MenuItem mItemPreviewRGBA;
	private MenuItem mItemPreviewHist;
	private MenuItem mItemPreviewCanny;
	private MenuItem mItemPreviewSepia;
	private MenuItem mItemPreviewSobel;
	private MenuItem mItemPreviewZoom;
	private MenuItem mItemPreviewPixelize;
	private MenuItem mItemPreviewPosterize;
	private CameraBridgeViewBase mOpenCvCameraView;
	private Mat mROIMat;
	private Mat rgba;
	private Size mSize0;

	long eventDuration = 0;

	private Mat mIntermediateMat;
	private Mat mMat0;
	private MatOfInt mChannels[];
	private MatOfInt mHistSize;
	private int mHistSizeNum = 25;
	private MatOfFloat mRanges;
	private Scalar mColorsRGB[];
	private Scalar mColorsHue[];
	private Scalar mWhilte;
	private Point mP1;
	private Point mP2;
	private float mBuff[];
	private Mat mSepiaKernel;

	private Scalar cRed;
	private Scalar cGreen;

	public static int viewMode = VIEW_MODE_RGBA;

	private CascadeClassifier mCascade;

	private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
		@Override
		public void onManagerConnected(int status) {
			switch (status) {
			case LoaderCallbackInterface.SUCCESS: {
				Log.i(TAG, "OpenCV loaded successfully");
				mOpenCvCameraView.enableView();

				try {
					// DO FACE CASCADE SETUP

					Context context = getApplicationContext();
					//InputStream is3 = context.getResources().openRawResource(
						//	R.raw.haarcascade_frontalface_default);
					File cascadeDir = context.getDir("cascade",
							Context.MODE_PRIVATE);
					File cascadeFile = new File(cascadeDir,
							"haarcascade_frontalface_default.xml");

					FileOutputStream os = new FileOutputStream(cascadeFile);

					byte[] buffer = new byte[4096];
					int bytesRead;

					while ((bytesRead = is3.read(buffer)) != -1) {
						os.write(buffer, 0, bytesRead);
					}

					is3.close();
					os.close();

					mCascade = new CascadeClassifier(
							cascadeFile.getAbsolutePath());

					if (mCascade.empty()) {
						// Log.d(TAG, "Failed to load cascade classifier");
						mCascade = null;
					}

					cascadeFile.delete();
					cascadeDir.delete();

				} catch (IOException e) {
					e.printStackTrace();
					// Log.d(TAG, "Failed to load cascade. Exception thrown: " +
					// e);
				}

			}
				break;
			default: {
				super.onManagerConnected(status);
			}
				break;
			}
		}
	};

	private int mCameraId = 0;

	private double dTextScaleFactor;

	public MainActivity() {
		Log.i(TAG, "Instantiated new " + this.getClass());
	}

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		Log.i(TAG, "called onCreate");
		super.onCreate(savedInstanceState);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

		setContentView(R.layout.activity_main);

		mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.java_surface_view);
		mOpenCvCameraView.setCvCameraViewListener(this);
		
		
		
		
		
		
	
	}

	@Override
	public void onPause() {
		super.onPause();
		if (mOpenCvCameraView != null)
			mOpenCvCameraView.disableView();
	}

	@Override
	public void onResume() {
		super.onResume();
		OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_3, this,
				mLoaderCallback);
	}

	public void onDestroy() {
		super.onDestroy();
		if (mOpenCvCameraView != null)
			mOpenCvCameraView.disableView();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		Log.i(TAG, "called onCreateOptionsMenu");
		mItemPreviewRGBA = menu.add("Swap Camera");
		mItemPreviewHist = menu.add("Histograms");
		mItemPreviewCanny = menu.add("Canny");
		mItemPreviewSepia = menu.add("Sepia");
		mItemPreviewSobel = menu.add("Sobel");
		mItemPreviewZoom = menu.add("Zoom");
		mItemPreviewPixelize = menu.add("Pixelize");
		mItemPreviewPosterize = menu.add("Posterize");
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Log.i(TAG, "called onOptionsItemSelected; selected item: " + item);
		if (item == mItemPreviewRGBA) {
			viewMode = VIEW_MODE_RGBA;
			swapCamera();
		}
		if (item == mItemPreviewHist)
			viewMode = VIEW_MODE_HIST;
		else if (item == mItemPreviewCanny)
			viewMode = VIEW_MODE_CANNY;
		else if (item == mItemPreviewSepia)
			viewMode = VIEW_MODE_SEPIA;
		else if (item == mItemPreviewSobel)
			viewMode = VIEW_MODE_SOBEL;
		else if (item == mItemPreviewZoom)
			viewMode = VIEW_MODE_ZOOM;
		else if (item == mItemPreviewPixelize)
			viewMode = VIEW_MODE_PIXELIZE;
		else if (item == mItemPreviewPosterize)
			viewMode = VIEW_MODE_POSTERIZE;
		return true;
	}

	public void onCameraViewStarted(int width, int height) {
		mIntermediateMat = new Mat();
		mSize0 = new Size();
		mChannels = new MatOfInt[] { new MatOfInt(0), new MatOfInt(1),
				new MatOfInt(2) };
		mBuff = new float[mHistSizeNum];
		mHistSize = new MatOfInt(mHistSizeNum);
		mRanges = new MatOfFloat(0f, 256f);
		mMat0 = new Mat();
		mColorsRGB = new Scalar[] { new Scalar(200, 0, 0, 255),
				new Scalar(0, 200, 0, 255), new Scalar(0, 0, 200, 255) };
		mColorsHue = new Scalar[] { new Scalar(255, 0, 0, 255),
				new Scalar(255, 60, 0, 255), new Scalar(255, 120, 0, 255),
				new Scalar(255, 180, 0, 255), new Scalar(255, 240, 0, 255),
				new Scalar(215, 213, 0, 255), new Scalar(150, 255, 0, 255),
				new Scalar(85, 255, 0, 255), new Scalar(20, 255, 0, 255),
				new Scalar(0, 255, 30, 255), new Scalar(0, 255, 85, 255),
				new Scalar(0, 255, 150, 255), new Scalar(0, 255, 215, 255),
				new Scalar(0, 234, 255, 255), new Scalar(0, 170, 255, 255),
				new Scalar(0, 120, 255, 255), new Scalar(0, 60, 255, 255),
				new Scalar(0, 0, 255, 255), new Scalar(64, 0, 255, 255),
				new Scalar(120, 0, 255, 255), new Scalar(180, 0, 255, 255),
				new Scalar(255, 0, 255, 255), new Scalar(255, 0, 215, 255),
				new Scalar(255, 0, 85, 255), new Scalar(255, 0, 0, 255) };
		mWhilte = Scalar.all(255);
		mP1 = new Point();
		mP2 = new Point();

		DisplayMetrics dm = this.getResources().getDisplayMetrics();
		int densityDpi = dm.densityDpi;
		dTextScaleFactor = ((double) densityDpi / 240.0) * 0.9;
		
		 rgba = new Mat(height, width, CvType.CV_8UC4);
	        mIntermediateMat = new Mat(height, width, CvType.CV_8UC4);
	        
	        makeToast();

		// Fill sepia kernel
		mSepiaKernel = new Mat(4, 4, CvType.CV_32F);
		mSepiaKernel.put(0, 0, /* R */0.189f, 0.769f, 0.393f, 0f);
		mSepiaKernel.put(1, 0, /* G */0.168f, 0.686f, 0.349f, 0f);
		mSepiaKernel.put(2, 0, /* B */0.131f, 0.534f, 0.272f, 0f);
		mSepiaKernel.put(3, 0, /* A */0.000f, 0.000f, 0.000f, 1f);
	}

	public void onCameraViewStopped() {
		// Explicitly deallocate Mats
		if (mIntermediateMat != null)
			mIntermediateMat.release();

		mIntermediateMat = null;
	}

	/*
	 * @Override public boolean onKeyDown(int keyCode, KeyEvent event) { if
	 * (event.getKeyCode() == KeyEvent.KEYCODE_POWER) { // do what you want with
	 * the power button Toast.makeText(getApplicationContext(), "down",
	 * Toast.LENGTH_LONG) .show(); return true; } return
	 * super.onKeyDown(keyCode, event); }
	 * 
	 * @Override public boolean onKeyUp(int keyCode, KeyEvent event) { // TODO
	 * Auto-generated method stub if (event.getKeyCode() ==
	 * KeyEvent.KEYCODE_POWER) { // do what you want with the power button
	 * Toast.makeText(getApplicationContext(), "up", Toast.LENGTH_LONG) .show();
	 * return true; } return super.onKeyUp(keyCode, event); }
	 */

	private void swapCamera() {
		mCameraId = mCameraId ^ 1; // bitwise not operation to flip 1 to 0 and
									// vice versa
		mOpenCvCameraView.disableView();
		mOpenCvCameraView.setCameraIndex(mCameraId);
		mOpenCvCameraView.enableView();
	}

	int count = 0;

	private long lMilliNow=0;

	private int lFrameCount=0;

	private long lMilliShotTime=0;

	private boolean bShootNow;

	private String sShotText;

	private String string;

	private long lMilliStart=0;

	@Override
	public boolean onTouchEvent(MotionEvent event) {

		int action = MotionEventCompat.getActionMasked(event);

		switch (action) {
		case (MotionEvent.ACTION_DOWN):
			count++;

			return false;
		default:
			return super.onTouchEvent(event);
		}
	}

	public void makeToast() {

		TimerTask task = new TimerTask() {
			  @Override
			  public void run() {
				  
				  
			    //do some processing
					Thread t = new Thread(new Runnable() {
						@Override
						public void run() {
							
								// do stuff
								Looper.prepare();

								Toast.makeText(MainActivity.this, count + " counts",
										Toast.LENGTH_SHORT).show();
								
								count=0;
								Looper.loop();
								
								
								
						}
					});
					t.start();
					
				 
			  }
			};

			Timer timer = new Timer();
			timer.schedule(task, 3000l, 5000l); //call the run() method at 1 second intervals

	}

	public boolean SaveImage(Mat mat) {

		Imgproc.cvtColor(mat, mIntermediateMat, Imgproc.COLOR_RGBA2BGR, 3);

		String filename = "OpenCV_";
		SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");
		Date date = new Date(System.currentTimeMillis());
		String dateString = fmt.format(date);
		String fileName = Environment.getExternalStorageDirectory().getPath()
				+ "/Pictures/Screenshots/_" + dateString + ".jpg";

		Boolean bool = null;
		filename = fileName.toString();
		bool = Highgui.imwrite(filename, mIntermediateMat);

		// if (bool == false)
		// Log.d("Baz", "Fail writing image to external storage");

		return bool;

	}

	private void faceDetect(Mat rgba) {

		Mat gray = new Mat();
		Imgproc.cvtColor(rgba, gray, Imgproc.COLOR_RGBA2GRAY);

		Rect rect;
		Rect rDest;

		rect = new Rect();
		rDest = new Rect();

		rDest.x = 5;
		rDest.y = 5;
		rDest.width = 100;
		rDest.height = 100;

		Mat mFaceDest = new Mat();
		mFaceDest = rgba.submat(rDest);
		int iMaxFaceHeight = 0;
		int iMaxFaceHeightIndex = -1;

		if (mCascade != null) {
			int height = gray.rows();
			double faceSize = (double) height * 0.25;

			Size sSize = new Size();
			sSize.width = faceSize;
			sSize.height = faceSize;

			MatOfRect faces = new MatOfRect();
			mCascade.detectMultiScale(gray, faces, 1.1, 2, 2, sSize, new Size());

			Rect[] facesArray = faces.toArray();

			cRed = new Scalar(255, 0, 0, 255);
			cGreen = new Scalar(0, 255, 0, 255);

			for (int i = 0; i < facesArray.length; i++) {

				// draw the rectangle itself
				Core.rectangle(rgba, facesArray[i].tl(), facesArray[i].br(),
						cRed, 3);
				if (iMaxFaceHeight < facesArray[i].height) {
					iMaxFaceHeight = facesArray[i].height;
					iMaxFaceHeightIndex = i;
				}
			}

			// now save the biggest face to a file
			if (iMaxFaceHeight > 0) {
				// we have at least one face
				rect = facesArray[iMaxFaceHeightIndex];

				// get the submat of the rect containing the face
				mROIMat = rgba.submat(rect);

				SaveImage(mROIMat);

				// resize it to the dest rect size (100x100)
				sSize.width = 100;
				sSize.height = 100;
				Mat mFaceResized = new Mat();
				Imgproc.resize(mROIMat, mFaceResized, sSize);
				// copy it to dest rect in main image

				mFaceResized.copyTo(mFaceDest);
				ShowTitle("Face Detection", 1, cGreen);
			}
		}

	}

	private void ShowTitle (String s, int iLineNum, Scalar color) {
		Core.putText(rgba, s, new Point(10, (int)(dTextScaleFactor * 60 * iLineNum)), 
   			 Core.FONT_HERSHEY_SIMPLEX, dTextScaleFactor, color, 2);
        }

	public Mat onCameraFrame(CvCameraViewFrame inputFrame) {
	    rgba = inputFrame.rgba();
		Size sizeRgba = rgba.size();

		Mat rgbaInnerWindow;

		int rows = (int) sizeRgba.height;
		int cols = (int) sizeRgba.width;

		int left = cols / 8;
		int top = rows / 8;

		int width = cols * 3 / 4;
		int height = rows * 3 / 4;
		
		if (lMilliStart == 0)
           	lMilliStart = System.currentTimeMillis();

        if ((lMilliNow - lMilliStart) > 10000) {
           	lMilliStart = System.currentTimeMillis(); 
            lFrameCount = 0;
            }

		switch (MainActivity.viewMode) {
		case MainActivity.VIEW_MODE_RGBA:
			// Convert the image into a gray image
			
			faceDetect(rgba);
			 

			break;

		case MainActivity.VIEW_MODE_HIST:
			Mat hist = new Mat();
			int thikness = (int) (sizeRgba.width / (mHistSizeNum + 10) / 5);
			if (thikness > 5)
				thikness = 5;
			int offset = (int) ((sizeRgba.width - (5 * mHistSizeNum + 4 * 10)
					* thikness) / 2);
			// RGB
			for (int c = 0; c < 3; c++) {
				Imgproc.calcHist(Arrays.asList(rgba), mChannels[c], mMat0,
						hist, mHistSize, mRanges);
				Core.normalize(hist, hist, sizeRgba.height / 2, 0,
						Core.NORM_INF);
				hist.get(0, 0, mBuff);
				for (int h = 0; h < mHistSizeNum; h++) {
					mP1.x = mP2.x = offset + (c * (mHistSizeNum + 10) + h)
							* thikness;
					mP1.y = sizeRgba.height - 1;
					mP2.y = mP1.y - 2 - (int) mBuff[h];
					Core.line(rgba, mP1, mP2, mColorsRGB[c], thikness);
				}
			}
			// Value and Hue
			Imgproc.cvtColor(rgba, mIntermediateMat, Imgproc.COLOR_RGB2HSV_FULL);
			// Value
			Imgproc.calcHist(Arrays.asList(mIntermediateMat), mChannels[2],
					mMat0, hist, mHistSize, mRanges);
			Core.normalize(hist, hist, sizeRgba.height / 2, 0, Core.NORM_INF);
			hist.get(0, 0, mBuff);
			for (int h = 0; h < mHistSizeNum; h++) {
				mP1.x = mP2.x = offset + (3 * (mHistSizeNum + 10) + h)
						* thikness;
				mP1.y = sizeRgba.height - 1;
				mP2.y = mP1.y - 2 - (int) mBuff[h];
				Core.line(rgba, mP1, mP2, mWhilte, thikness);
			}
			// Hue
			Imgproc.calcHist(Arrays.asList(mIntermediateMat), mChannels[0],
					mMat0, hist, mHistSize, mRanges);
			Core.normalize(hist, hist, sizeRgba.height / 2, 0, Core.NORM_INF);
			hist.get(0, 0, mBuff);
			for (int h = 0; h < mHistSizeNum; h++) {
				mP1.x = mP2.x = offset + (4 * (mHistSizeNum + 10) + h)
						* thikness;
				mP1.y = sizeRgba.height - 1;
				mP2.y = mP1.y - 2 - (int) mBuff[h];
				Core.line(rgba, mP1, mP2, mColorsHue[h], thikness);
			}
			break;

		case MainActivity.VIEW_MODE_CANNY:
			rgbaInnerWindow = rgba
					.submat(top, top + height, left, left + width);
			Imgproc.Canny(rgbaInnerWindow, mIntermediateMat, 80, 90);
			Imgproc.cvtColor(mIntermediateMat, rgbaInnerWindow,
					Imgproc.COLOR_GRAY2BGRA, 4);
			rgbaInnerWindow.release();
			break;

		case MainActivity.VIEW_MODE_SOBEL:
			Mat gray = inputFrame.gray();
			Mat grayInnerWindow = gray.submat(top, top + height, left, left
					+ width);
			rgbaInnerWindow = rgba
					.submat(top, top + height, left, left + width);
			Imgproc.Sobel(grayInnerWindow, mIntermediateMat, CvType.CV_8U, 1, 1);
			Core.convertScaleAbs(mIntermediateMat, mIntermediateMat, 10, 0);
			Imgproc.cvtColor(mIntermediateMat, rgbaInnerWindow,
					Imgproc.COLOR_GRAY2BGRA, 4);
			grayInnerWindow.release();
			rgbaInnerWindow.release();
			ShowTitle("Face Detection", 1, cGreen);
			break;

		case MainActivity.VIEW_MODE_SEPIA:
			rgbaInnerWindow = rgba
					.submat(top, top + height, left, left + width);
			Core.transform(rgbaInnerWindow, rgbaInnerWindow, mSepiaKernel);
			rgbaInnerWindow.release();
			break;

		case MainActivity.VIEW_MODE_ZOOM:
			Mat zoomCorner = rgba.submat(0, rows / 2 - rows / 10, 0, cols / 2
					- cols / 10);
			Mat mZoomWindow = rgba.submat(rows / 2 - 9 * rows / 100, rows / 2
					+ 9 * rows / 100, cols / 2 - 9 * cols / 100, cols / 2 + 9
					* cols / 100);
			Imgproc.resize(mZoomWindow, zoomCorner, zoomCorner.size());
			Size wsize = mZoomWindow.size();
			Core.rectangle(mZoomWindow, new Point(1, 1), new Point(
					wsize.width - 2, wsize.height - 2), new Scalar(255, 0, 0,
					255), 2);
			zoomCorner.release();
			mZoomWindow.release();
			break;

		case MainActivity.VIEW_MODE_PIXELIZE:
			rgbaInnerWindow = rgba
					.submat(top, top + height, left, left + width);
			Imgproc.resize(rgbaInnerWindow, mIntermediateMat, mSize0, 0.1, 0.1,
					Imgproc.INTER_NEAREST);
			Imgproc.resize(mIntermediateMat, rgbaInnerWindow,
					rgbaInnerWindow.size(), 0., 0., Imgproc.INTER_NEAREST);
			rgbaInnerWindow.release();
			break;

		case MainActivity.VIEW_MODE_POSTERIZE:
			/*
			 * Imgproc.cvtColor(rgbaInnerWindow, mIntermediateMat,
			 * Imgproc.COLOR_RGBA2RGB);
			 * Imgproc.pyrMeanShiftFiltering(mIntermediateMat, mIntermediateMat,
			 * 5, 50); Imgproc.cvtColor(mIntermediateMat, rgbaInnerWindow,
			 * Imgproc.COLOR_RGB2RGBA);
			 */
			rgbaInnerWindow = rgba
					.submat(top, top + height, left, left + width);
			Imgproc.Canny(rgbaInnerWindow, mIntermediateMat, 80, 90);
			rgbaInnerWindow.setTo(new Scalar(0, 0, 0, 255), mIntermediateMat);
			Core.convertScaleAbs(rgbaInnerWindow, mIntermediateMat, 1. / 16, 0);
			Core.convertScaleAbs(mIntermediateMat, rgbaInnerWindow, 16, 0);
			rgbaInnerWindow.release();
			break;
		}
		
		// get the time now in every frame
        lMilliNow = System.currentTimeMillis();	
    		
    	// update the frame counter
    	lFrameCount++;
		
      
        	string = String.format("FPS: %2.1f", (float)(lFrameCount * 1000) / (float)(lMilliNow - lMilliStart));

        	ShowTitle (string, 2, cGreen);
            
        	
        	ShowTitle("Counts: " + String.valueOf(count), 3, cGreen);
        
        if (bShootNow) {
        	// get the time of the attempt to save a screenshot
        	lMilliShotTime = System.currentTimeMillis();
            bShootNow = false;
            
            // try it, and set the screen text accordingly.
            // this text is shown at the end of each frame until 
            // 1.5 seconds has elapsed
            if (SaveImage (rgba)) {
                sShotText = "SCREENSHOT SAVED";
                }
            else {
                sShotText = "SCREENSHOT FAILED";
                }
            	
            }

        if (System.currentTimeMillis() - lMilliShotTime < 1500)
        	ShowTitle (sShotText, 3, cRed);
        

		return rgba;
	}

}
